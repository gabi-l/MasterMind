"""
Module encapsulating the concept of secret code and attempts
"""
from src.core.peg import CodePeg


class Code(object):
    """
    Class encapsulating the concept of code

    Attributes:
        code (list): The ordered array of the code
    """
    def __init__(self, peg1, peg2, peg3, peg4):
        self.code = [None] * 4
        self.set(peg1, peg2, peg3, peg4)

    def set(self, peg1, peg2, peg3, peg4):
        assert isinstance(peg1, CodePeg), 'The pin1 is not of type CodePeg. Type passed: ' + str(type(peg1))
        assert isinstance(peg2, CodePeg), 'The pin1 is not of type CodePeg. Type passed: ' + str(type(peg2))
        assert isinstance(peg3, CodePeg), 'The pin1 is not of type CodePeg. Type passed: ' + str(type(peg3))
        assert isinstance(peg4, CodePeg), 'The pin1 is not of type CodePeg. Type passed: ' + str(type(peg4))
        self.code[0], self.code[1], self.code[2], self.code[3] = peg1, peg2, peg3, peg4


class SecretCode(Code):
    """
    Class encapsulating the concept of secret code generated by the code maker
    """
    __instance = None

    def __init__(self):
        pass

    @classmethod
    def instance(cls):
        """
        Method used to access the SecretCode instance
        """
        if cls.__instance is None:
            cls.__instance = SecretCode()
        return cls.__instance

    def initialize(self, peg1, peg2, peg3, peg4):
        Code.__init__(self, peg1, peg2, peg3, peg4)


class Attempt(Code):
    """
    Class encapsulating the concept of attempts that a code breaker tries
    """
    def __init__(self, peg1, peg2, peg3, peg4):
        Code.__init__(self, peg1, peg2, peg3, peg4)
